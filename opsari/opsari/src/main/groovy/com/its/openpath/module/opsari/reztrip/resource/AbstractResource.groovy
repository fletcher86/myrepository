package com.its.openpath.module.opsari.reztrip.resource

import javax.servlet.http.HttpServletRequest
import javax.ws.rs.core.Context
import javax.ws.rs.core.Response

import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired

import com.dyuproject.protostuff.JsonIOUtil
import com.dyuproject.protostuff.Message
import com.its.openpath.module.opscommon.comm.bus.IMessageBus
import com.its.openpath.module.opscommon.model.messaging.ops.Ack
import com.its.openpath.module.opscommon.model.messaging.ops.AckResponse
import com.its.openpath.module.opscommon.model.messaging.ops.AvailabilityRequest
import com.its.openpath.module.opscommon.model.messaging.ops.AvailabilityRequestType
import com.its.openpath.module.opscommon.model.messaging.ops.AvailabilityResponse
import com.its.openpath.module.opscommon.model.messaging.ops.ErrorMessage
import com.its.openpath.module.opscommon.model.messaging.ops.ErrorResponse
import com.its.openpath.module.opscommon.model.messaging.ops.OpsErrorCode
import com.its.openpath.module.opscommon.model.messaging.ops.OpsMessage
import com.its.openpath.module.opscommon.model.messaging.ops.OpsTxnType
import com.its.openpath.module.opscommon.model.messaging.ops.ProductType
import com.its.openpath.module.opscommon.model.messaging.ops.RoomAvailabilityResponse
import com.its.openpath.module.opscommon.model.messaging.ops.rate.RateManagementType
import com.its.openpath.module.opscommon.model.messaging.ops.rate.RateRequest
import com.its.openpath.module.opscommon.model.messaging.ops.rate.RateResponse
import com.its.openpath.module.opscommon.model.messaging.ops.rate.RoomRateManagementResponse
import com.its.openpath.module.opscommon.model.messaging.ops.reservation.siteminder.NotificationReportRequest
import com.its.openpath.module.opscommon.model.messaging.ops.reservation.siteminder.ReservationManagementType
import com.its.openpath.module.opscommon.model.messaging.ops.reservation.siteminder.ReservationPullResponse
import com.its.openpath.module.opscommon.model.messaging.ops.reservation.siteminder.ReservationRequest
import com.its.openpath.module.opscommon.model.messaging.ops.reservation.siteminder.ReservationResponse
import com.its.openpath.module.opscommon.util.EventMessageBusQueueNames
import com.its.openpath.module.opscommon.util.InvocationContext
import com.its.openpath.module.opscommon.util.PersistenceMessageBusQueueNames
import com.its.openpath.module.opscommon.util.TimeUUIDUtils

/**
 * <code>AbstractResource.groovy</code>
 * <p/>
 * All the heavy lifting for a REST resource.  All common code abstracted out into this base class
 * <p/>
 * @author kent
 * @since Aug 21, 2012
 */
abstract class AbstractResource
{
  
  private static final Logger sLogger = LoggerFactory.getLogger( AbstractResource.class.name )
  
  @Autowired(required = true)
  protected IMessageBus mOpsMessageBus
  
  /**
   * Publish json string to ops message bus based on the OpsTxnType type
   * <p />
   * @param uuid universal unique id
   * @param notifJSON String
   * @param type OpsTxnType
   */
  public void publishOnOpsBus( UUID uuid, String notifJSON, OpsTxnType type )
  {
    OpsMessage opsReqMessage = new OpsMessage()
    opsReqMessage.correlationId = uuid.toString()
    opsReqMessage.correlationIdBytes = TimeUUIDUtils.asByteString( uuid )
    opsReqMessage.timestamp = TimeUUIDUtils.getTimeFromUUID( uuid )
    opsReqMessage.data = notifJSON
    switch ( type )
    {
      case OpsTxnType.RATE_MGMT:
        opsReqMessage.messageType = RateManagementType.RATE_UPDATE_NOTIF.number
        mOpsMessageBus.queueMessage( EventMessageBusQueueNames.RATE_MGMT_NOTIF, opsReqMessage )
        break
      case OpsTxnType.AVAILABILITY_MGMT:
        opsReqMessage.messageType = AvailabilityRequestType.HOTEL_AVAILABILITY_NOTIF.number
        mOpsMessageBus.queueMessage( EventMessageBusQueueNames.HOTEL_AVAIL_NOTIF, opsReqMessage )
        break
      case OpsTxnType.RESERVATION_MGMT:
        opsReqMessage.messageType = ReservationManagementType.PULL_RESERVATIONS.number
        mOpsMessageBus.queueMessage( EventMessageBusQueueNames.RESERVATIONS_PULL_REQUEST, opsReqMessage )
        break
      case OpsTxnType.RESERVATION_NOTIFICATION_REPORT_MGMT:
        opsReqMessage.messageType = ReservationManagementType.CONFIRM_RESERVATIONS.number
        mOpsMessageBus.queueMessage( EventMessageBusQueueNames.RESERVATIONS_CONFIRMATION_ERROR_NOTIF_REQUEST, opsReqMessage )
        mOpsMessageBus.queueMessage( EventMessageBusQueueNames.RESERVATIONS_CONFIRMATION_SUCCESS_NOTIF_REQUEST, opsReqMessage )
        break
    }
  }
  
  /**
   * Publish event OpsMessage to message bus for persistence
   * <p />
   * @param uuid UUID, time base uuid generated by TimeUUIDUtils
   * @param queueName String, message bus queue name
   * @param messageType Integer, messageType from enum
   * @param source String, source of the event
   * @param destination String, destination of the event
   * @param data String, the payload for this event
   */
  def void publishEventPersistToMessageBus( UUID uuid, String queueName, Integer messageType, String messageSubType, String source, String destination, String data )
  {
    OpsMessage msg = new OpsMessage()
    msg.messageType = messageType
    msg.messageSubType = messageSubType
    msg.source = source
    msg.destination = destination
    msg.correlationId = uuid.toString()
    msg.correlationIdBytes = TimeUUIDUtils.asByteString( uuid )
    msg.timestamp = TimeUUIDUtils.getTimeFromUUID( uuid )
    msg.data = data
    mOpsMessageBus.queueMessage( queueName, msg )
  }
  
  /**
   * All subclasses implement
   *
   * <p />
   * @param servletRequest HttpServletRequest
   * @return javax.ws.rs.core.Response
   */
  abstract Response processRequest( @Context HttpServletRequest servletRequest )
  
  /**
   * Process HttpServletRequest servletRequest and take action according the the OpsTxnType type.  
   * Set negativeTest to true if you want to cause a parse exception to occur to trigger negative testing
   * <p />
   * @param servletRequest HttpServletRequest
   * @param type OpsTxnType
   * @param negativeTest boolean
   * @return javax.ws.rs.core.Response
   */
  protected Response processRequest( HttpServletRequest servletRequest, OpsTxnType type, boolean negativeTest )
  {
    //first initialize correlationId and InvocationContext
    UUID correlationId = TimeUUIDUtils.getUniqueTimeUUIDinMicros()
    InvocationContext context = InvocationContext.getNewInstance( correlationId )
    
    String responseJSON = null, requestJSON = null
    Message requestObj
    Response responseObj
    try
    {
      requestJSON = servletRequest.inputStream.text
      
      // muck it up for negative testing
      if ( negativeTest )
        requestJSON = "fdsfsafasdf4{fdaf}3534" + requestJSON + "fadsf5435345{fdasaf}sdaf"
      
      if ( sLogger.isDebugEnabled() )
      {
        sLogger.debug "*** OPSARI - Rcvd a ${type} Request ..."
        sLogger.debug "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        if ( sLogger.isDebugEnabled() )
        {
          sLogger.debug "*** OPSARI - The new ${type} requestObj before parsing: \n[${requestJSON}]"
        }
      }
      this.publishOnOpsBus( correlationId, requestJSON, type )
      switch ( type )
      {
        case OpsTxnType.RATE_MGMT:
          requestObj = new RateRequest()
          JsonIOUtil.mergeFrom( requestJSON.bytes, requestObj, RateRequest.schema, false )
          this.publishEventPersistToMessageBus( correlationId, PersistenceMessageBusQueueNames.REQUEST_JSON_QUEUE, type.number,
              requestObj.class.name, "reztrip.endpoint", "siteminder.endpoint", requestJSON )
          break
        case OpsTxnType.AVAILABILITY_MGMT:
          requestObj = new AvailabilityRequest()
          JsonIOUtil.mergeFrom( requestJSON.bytes, requestObj, AvailabilityRequest.schema, false )
          this.publishEventPersistToMessageBus( correlationId, PersistenceMessageBusQueueNames.REQUEST_JSON_QUEUE, type.number,
              requestObj.class.name, "reztrip.endpoint", "siteminder.endpoint", requestJSON )
          break
        case OpsTxnType.RESERVATION_MGMT:
          requestObj = new ReservationRequest()
          JsonIOUtil.mergeFrom( requestJSON.bytes, requestObj, ReservationRequest.schema, false )
          this.publishEventPersistToMessageBus( correlationId, PersistenceMessageBusQueueNames.READ_REQUEST_JSON_QUEUE, type.number,
              requestObj.class.name, "reztrip.endpoint", "siteminder.endpoint", requestJSON )
          break
        case OpsTxnType.RESERVATION_NOTIFICATION_REPORT_MGMT:
        // in this case we already have a correlation id in the request, so overwrite the correlation id with InvocationContext
          requestObj = new NotificationReportRequest()
          JsonIOUtil.mergeFrom( requestJSON.bytes, requestObj, NotificationReportRequest.schema, false )
          correlationId = TimeUUIDUtils.toUUID ( ((NotificationReportRequest)requestObj).echoTokenBytes.getBytes() )
          context = InvocationContext.getNewInstance( correlationId )
          this.publishEventPersistToMessageBus( correlationId, PersistenceMessageBusQueueNames.RESERVATIONS_NOTIFICATION_REPORT_JSON_REQUEST, type.number,
              requestObj.class.name, "reztrip.endpoint", "siteminder.endpoint", requestJSON )
          break
      }
    }
    catch ( Throwable e )
    {
      String errMsg = "OPSARI - Couldn't parse the OPS JSON request received - > ${e.message}"
      responseJSON = this.logAndBuildErrorResponse( errMsg, "external-refid-goes-here-if-available", type, ProductType.HOTEL_ROOM, OpsErrorCode.SERVICE_REQUEST_FORMAT_ERROR, e )
    }
    
    responseJSON = (responseJSON == null) ? this.createOpenPathJSONResponse( requestObj, type ) : responseJSON
    
    if ( sLogger.isDebugEnabled() )
    {
      sLogger.debug "OPSARI - JSON Response for the ${type} rcvd is: [${responseJSON}]"
    }
    
    /**
     * PUBLISH EVENT RESPONSE FOR TXN PERSISTANCE, THIS IS AN ACK
     */
    switch ( type )
    {
      case OpsTxnType.RATE_MGMT:
        this.publishEventPersistToMessageBus( correlationId, PersistenceMessageBusQueueNames.RESPONSE_JSON_QUEUE, ReservationManagementType.PULL_RESERVATIONS.number,
        ReservationRequest.class.name, "reztrip.endpoint", "siteminder.endpoint", responseJSON )
        break
      case OpsTxnType.AVAILABILITY_MGMT:
        this.publishEventPersistToMessageBus( correlationId, PersistenceMessageBusQueueNames.RESPONSE_JSON_QUEUE, ReservationManagementType.PULL_RESERVATIONS.number,
        AvailabilityRequest.class.name, "reztrip.endpoint", "siteminder.endpoint", responseJSON )
        break
      case OpsTxnType.RESERVATION_MGMT:
        this.publishEventPersistToMessageBus( correlationId, PersistenceMessageBusQueueNames.READ_RESPONSE_JSON_QUEUE, ReservationManagementType.PULL_RESERVATIONS.number,
        ReservationRequest.class.name, "reztrip.endpoint", "siteminder.endpoint", responseJSON )
        break
      case OpsTxnType.RESERVATION_NOTIFICATION_REPORT_MGMT:
        this.publishEventPersistToMessageBus( correlationId, PersistenceMessageBusQueueNames.RESERVATIONS_NOTIFICATION_REPORT_JSON_RESPONSE, ReservationManagementType.PULL_RESERVATIONS.number,
        ReservationRequest.class.name, "reztrip.endpoint", "siteminder.endpoint", responseJSON )
        break
    }
  }
  
  
  /**
   * Helper method to build the JSON response message to be sent back.
   * <p />
   * @param jsonRequest - Service Request received
   * @return String - The response JSON string
   */
  private String createOpenPathJSONResponse( Message requestObj, OpsTxnType type )
  {
    def respClosure = { rs, externalReferenceId, responseData ->
      
      String response
      StringWriter writer = new StringWriter()
      try
      {
        rs.productType = ProductType.HOTEL_ROOM
        rs.responseData = responseData
        rs.responseData.isSuccess = false
        rs.responseData.extSysTimestamp = TimeUUIDUtils.getTimeFromUUID( InvocationContext.instance.correlationId )
        rs.responseData.extSysRefId = externalReferenceId?:InvocationContext.instance.correlationId
        
        JsonIOUtil.writeTo( writer, rs, rs.cachedSchema(), false )
        response =  writer.toString()
        sLogger.info("JSON Response = [${response}] correlationId = [${externalReferenceId?:InvocationContext.instance.correlationId}]")
      }
      catch ( Throwable e )
      {
        String errMsg = "OPSARI - Couldn't create an OPS JSON response to be sent back for ${type}"
        return this.logAndBuildErrorResponse( errMsg, externalReferenceId, type, ProductType.HOTEL_ROOM,
        OpsErrorCode.SERVICE_RESPONSE_FORMAT_ERROR, e )
      }
      return response
    }
    
    try
    {
      switch ( type )
      {
        case OpsTxnType.RATE_MGMT:
          RateResponse rs = new RateResponse()
          RateRequest rq = (RateRequest) requestObj
          RoomRateManagementResponse responseData = new RoomRateManagementResponse()
          respClosure( rs, rq.requestData.extSysRefId, responseData )
          break
        case OpsTxnType.AVAILABILITY_MGMT:
          AvailabilityResponse rs = new AvailabilityResponse()
          AvailabilityRequest rq = (AvailabilityRequest) requestObj
          RoomAvailabilityResponse responseData = new RoomAvailabilityResponse()
          respClosure( rs, rq.requestData.extSysRefId, responseData )
          break
        case OpsTxnType.RESERVATION_MGMT:
          ReservationResponse rs = new ReservationResponse()
          ReservationRequest rq = (ReservationRequest) requestObj
          ReservationPullResponse responseData = new ReservationPullResponse()
          responseData.reservationMgtType = ReservationManagementType.PULL_RESERVATIONS
          respClosure( rs, rq.requestData.extSysRefId, responseData )
          break
        case OpsTxnType.RESERVATION_NOTIFICATION_REPORT_MGMT:
          Ack rs = new Ack()
          NotificationReportRequest rq = (NotificationReportRequest) requestObj
          AckResponse responseData = new AckResponse()
          respClosure( rs, null, responseData )
          break
      }
    }
    catch (Throwable e)
    {
      sLogger.error("OPSARI - JSON Response for the ${type} rcvd is: [${responseJSON}]", e )
    }
    
  }
  
  /**
   * Log and build error response 
   * <p />
   * @param errorMessage String
   * @param externalRefId String
   * @param type OpsTxnType
   * @param productType ProductType
   * @param errorCode OpsErrorCode
   * @param e Throwable
   * @return String json proto string
   */
  protected String logAndBuildErrorResponse( String errorMessage, String externalRefId, OpsTxnType type, ProductType productType, OpsErrorCode errorCode, Throwable e )
  {
    sLogger.error "*************************************************************************************************"
    sLogger.error "${errorMessage}"
    sLogger.error "*************************************************************************************************"
    sLogger.error errorMessage, e
    
    ErrorResponse errorResponse = new ErrorResponse()
    List<ErrorMessage> errorMessageList = new ArrayList<ErrorMessage>()
    errorResponse.errorMessagesList = errorMessageList
    ErrorMessage err = new ErrorMessage()
    err.errorCode = errorCode
    err.errorMessage = errorMessage
    errorMessageList.add( err )
    
    def respClosure = { rs, externalReferenceId, responseData ->
      rs.productType = ProductType.HOTEL_ROOM
      rs.errorResponse = errorResponse
      rs.responseData = responseData
      rs.responseData.isSuccess = false
      rs.responseData.extSysTimestamp = TimeUUIDUtils.getTimeFromUUID( InvocationContext.instance.correlationId )
      rs.responseData.extSysRefId = externalReferenceId
      StringWriter writer = new StringWriter()
      JsonIOUtil.writeTo( writer, rs, rs.cachedSchema(), false )
      writer.toString()
    }
    
    switch ( type )
    {
      case OpsTxnType.RATE_MGMT:
        RateResponse rs = new RateResponse()
        RoomRateManagementResponse responseData = new RoomRateManagementResponse()
        respClosure( rs, externalRefId, responseData )
        break
      case OpsTxnType.AVAILABILITY_MGMT:
        AvailabilityResponse rs = new AvailabilityResponse()
        RoomAvailabilityResponse responseData = new RoomAvailabilityResponse()
        respClosure( rs, externalRefId, responseData )
        break
      case OpsTxnType.RESERVATION_MGMT:
        ReservationResponse rs = new ReservationResponse()
        ReservationPullResponse responseData = new ReservationPullResponse()
        responseData.reservationMgtType = ReservationManagementType.PULL_RESERVATIONS
        respClosure( rs, externalRefId, responseData )
        break
    }
  }
}